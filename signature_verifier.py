"""
Signature Verifier ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–¥–ø–∏—Å–∞–Ω–Ω–æ–≥–æ Bitcoin-–∞–¥—Ä–µ—Å–æ–º.
"""

import argparse
import base64
import hashlib
import ecdsa
import base58
from bitcoin import ecdsa_verify, ecdsa_recover, privkey_to_address

def verify_message(address, signature, message):
    import bitcoin
    try:
        valid = bitcoin.ecdsa_verify(message, signature, address)
        return valid
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ:", e)
        return False

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–ü—Ä–æ–≤–µ—Ä–∫–∞ Bitcoin-–ø–æ–¥–ø–∏—Å–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    parser.add_argument("address", help="Bitcoin-–∞–¥—Ä–µ—Å")
    parser.add_argument("signature", help="–ü–æ–¥–ø–∏—Å—å (base64)")
    parser.add_argument("message", help="–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")

    args = parser.parse_args()

    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏:")
    if verify_message(args.address, args.signature, args.message):
        print("‚úÖ –ü–æ–¥–ø–∏—Å—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
    else:
        print("‚ùå –ü–æ–¥–ø–∏—Å—å –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.")
